import logging
import asyncio
import datetime
import pandas as pd
import ta
import aiohttp

from tinkoff.invest import Client, CandleInterval
from tinkoff.invest.utils import now

from aiogram import Bot

# üîê –¢–æ–∫–µ–Ω—ã
TINKOFF_TOKEN = ""
TELEGRAM_TOKEN = ""
CHAT_ID = -

# üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∏
FIGI = "BBG000N9MNX3"  # TSLA
INTERVAL = CandleInterval.CANDLE_INTERVAL_1_MIN
SLEEP_SECONDS = 60

# ‚öôÔ∏è –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def get_candles_sync(client: Client, figi: str) -> pd.DataFrame:
    now_time = now()
    from_time = now_time - datetime.timedelta(minutes=50)
    to_time = now_time

    candles = client.market_data.get_candles(
        figi=figi,
        from_=from_time,
        to=to_time,
        interval=INTERVAL,
    ).candles

    df = pd.DataFrame([{
        "time": c.time,
        "open": c.open.units + c.open.nano / 1e9,
        "close": c.close.units + c.close.nano / 1e9,
        "high": c.high.units + c.high.nano / 1e9,
        "low": c.low.units + c.low.nano / 1e9,
        "volume": c.volume,
    } for c in candles])

    return df


def analyze_signals(df: pd.DataFrame) -> str | None:
    if len(df) < 35:
        return None

    df = df.copy()
    df.set_index("time", inplace=True)

    df["rsi"] = ta.momentum.RSIIndicator(close=df["close"], window=14).rsi()
    macd = ta.trend.MACD(close=df["close"])
    df["macd"] = macd.macd()
    df["macd_signal"] = macd.macd_signal()

    latest = df.iloc[-1]
    previous = df.iloc[-2]

    # üí° –£—Å–ª–æ–≤–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
    signal = None

    if previous["macd"] < previous["macd_signal"] and latest["macd"] > latest["macd_signal"]:
        signal = "üíö *MACD –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö (BUY)*"
    elif previous["macd"] > previous["macd_signal"] and latest["macd"] < latest["macd_signal"]:
        signal = "‚ù§Ô∏è *MACD –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –≤–Ω–∏–∑ (SELL)*"

    if latest["rsi"] > 70:
        signal = (signal or "") + "\nüìà RSI > 70 (–ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å)"
    elif latest["rsi"] < 30:
        signal = (signal or "") + "\nüìâ RSI < 30 (–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å)"

    return signal


async def main_loop():
    bot = Bot(token=TELEGRAM_TOKEN)
    async with aiohttp.ClientSession() as session:
        with Client(TINKOFF_TOKEN) as client:
            while True:
                try:
                    df = await asyncio.to_thread(get_candles_sync, client, FIGI)
                    signal = analyze_signals(df)

                    if signal:
                        message = f"üìä *TSLA*\n{signal}"
                        await bot.send_message(chat_id=CHAT_ID, text=message, parse_mode="Markdown")

                    logger.info("–¶–∏–∫–ª –∑–∞–≤–µ—Ä—à—ë–Ω. –ñ–¥—ë–º —Å–ª–µ–¥—É—é—â—É—é –º–∏–Ω—É—Ç—É.")
                    await asyncio.sleep(SLEEP_SECONDS)

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞: {e}")
                    await asyncio.sleep(SLEEP_SECONDS)


if __name__ == "__main__":
    logger.info("–ó–∞–ø—É—Å–∫")
    asyncio.run(main_loop())
